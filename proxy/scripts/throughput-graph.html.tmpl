<html>
<title>HTTP Benchmark Report Renderer</title>
<head>
    <!--Load the AJAX API-->
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
      google.charts.load('current', {'packages': ['corechart']});

      google.charts.setOnLoadCallback(onLoadCallback);

      const exampleReport = ${report_json_data};
      function onLoadCallback() {
        drawChart(parseReport(exampleReport));
      }

      function onInputChange(files) {
        const selectedFile = files[0];
        selectedFile.text().then(text => JSON.parse(text)).then(parseReport).then(drawChart);
      }

      function onSelectChange(a) {
        console.log(a)
      }

      const percentiles = ["50.000%", "75.000%", "90.000%", "99.000%", "99.900%", "99.990%", "99.999%"];
      const regexs = {
        total: new RegExp(/^\s*(\d+) requests in/),
        error: new RegExp(/^\s*Non-2xx or 3xx responses: (\d+)\s*$$/),
        throughput: new RegExp(/^\s*Requests\/sec:\s*(.+)\s*$$/),
        percentile(name) {
          return new RegExp(`^\\s*$${name}\\s*(.+)\\s*$$`);
        }
      };

      function parseReport(report) {
        const data = {};
        for (const rate in report) {
          const stdout = report[rate];
          // console.log(stdout);
          const lines = stdout.split('\n');
          const item = data[rate] = {percentiles: {}, total: 0, error: 0, throughput: 0};
          percentiles.map(percentile => {
            lines.forEach(line => {
              const matches = regexs.percentile(percentile).exec(line);
              if (matches) {
                item.percentiles[percentile] = getMillis(matches[1].trim());
              }
            });
          });
          lines.forEach(line => {
            let matches = regexs.total.exec(line);
            if (matches) {
              item.total = Number(matches[1].trim());
            }
            matches = regexs.error.exec(line);
            if (matches) {
              item.error = Number(matches[1].trim());
            }
            matches = regexs.throughput.exec(line);
            if (matches) {
              item.throughput = Number(matches[1].trim());
            }
          });
        }
        return data;
      }

      // get milliseconds from string time representation
      function getMillis(str) {
        if (str.endsWith('ms')) {
          return Number(str.slice(0, -2))
        }

        if (str.endsWith('s')) {
          return Number(str.slice(0, -1)) * 1000
        }

        if (str.endsWith('m')) {
          return Number(str.slice(0, -1)) * 60 * 1000
        }

        throw new Error(`unhandled time unit $${str}`);
      }

      function drawChart(report) {
        console.log('draw chart for report', report);

        const latencyRows = [['Rate (Req/s)'].concat(percentiles)];
        const throughputRows = [['Rate (Req/s)', 'Throughput']];
        const errRows = [['Rate (Req/s)', 'Error Rate']];

        for (const rate in report) {
          const item = report[rate];
          latencyRows.push([rate].concat(Object.values(item.percentiles)));
          throughputRows.push([rate, item.throughput]);
          errRows.push([rate, (item.error / item.total) * 100]);
        }

        new google.visualization.LineChart(document.getElementById('latency'))
          .draw(google.visualization.arrayToDataTable(latencyRows), {
            title: 'Latency by Rate',
            // curveType: 'function',
            focusTarget: 'category',
            explorer: {
              actions: ['dragToZoom', 'rightClickToReset']
            },
            hAxis: {
              title: 'Rate (Req/s)',
            },
            vAxis: {
              title: 'Latency (ms)',
              viewWindow: {
                min: 0
              }
            }
            // width: 1500,
            // height: 600,
          });

        new google.visualization.LineChart(document.getElementById('throughput'))
          .draw(google.visualization.arrayToDataTable(throughputRows), {
            title: 'Throughput by Rate',
            curveType: 'function',
            focusTarget: 'category',
            hAxis: {
              title: 'Rate (Req/s)',
            },
            vAxis: {
              title: 'Throughput (Req/s)',
              viewWindow: {
                min: 0
              }
            }
            // width: 1500,
            // height: 600,
          });

        new google.visualization.LineChart(document.getElementById('error-rate'))
          .draw(google.visualization.arrayToDataTable(errRows), {
            title: 'Error Rate by Rate',
            curveType: 'function',
            focusTarget: 'category',
            hAxis: {
              title: 'Rate (Req/s)',
            },
            vAxis: {
              title: 'Error Rate (%)',
              viewWindow: {
                min: 0,
                max: 100
              }
            }
            // width: 1500,
            // height: 600,
          });
      }
    </script>
</head>

<body>
<h1>HTTP Benchmark Report Renderer</h1>
<div>
    <label>Select file here to render</label> <input type="file" id="input" onchange="onInputChange(this.files)">
</div>
<!--<div>-->
<!--    <label>Graph Type</label>-->
<!--    <select onchange="onSelectChange(this)">-->
<!--        <option value="latency">Latency by Rate</option>-->
<!--        <option value="throughput">Throughput by Rate</option>-->
<!--        <option value="error-rate">Error Rate by Rate</option>-->
<!--    </select>-->
<!--</div>-->
<div id="latency" style="width: 100%; height: 600px"></div>
<div id="throughput" style="width: 100%; height: 600px"></div>
<div id="error-rate" style="width: 100%; height: 600px"></div>
</body>
</html>
