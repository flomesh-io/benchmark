/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 36773.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 3.0], [4.5, 3.0], [4.6, 3.0], [4.7, 3.0], [4.8, 3.0], [4.9, 3.0], [5.0, 3.0], [5.1, 3.0], [5.2, 3.0], [5.3, 3.0], [5.4, 3.0], [5.5, 3.0], [5.6, 3.0], [5.7, 3.0], [5.8, 3.0], [5.9, 3.0], [6.0, 3.0], [6.1, 3.0], [6.2, 3.0], [6.3, 3.0], [6.4, 3.0], [6.5, 3.0], [6.6, 3.0], [6.7, 3.0], [6.8, 3.0], [6.9, 3.0], [7.0, 4.0], [7.1, 4.0], [7.2, 4.0], [7.3, 4.0], [7.4, 4.0], [7.5, 4.0], [7.6, 4.0], [7.7, 4.0], [7.8, 4.0], [7.9, 4.0], [8.0, 4.0], [8.1, 4.0], [8.2, 4.0], [8.3, 4.0], [8.4, 4.0], [8.5, 4.0], [8.6, 4.0], [8.7, 4.0], [8.8, 4.0], [8.9, 4.0], [9.0, 4.0], [9.1, 4.0], [9.2, 4.0], [9.3, 4.0], [9.4, 4.0], [9.5, 4.0], [9.6, 4.0], [9.7, 5.0], [9.8, 5.0], [9.9, 5.0], [10.0, 5.0], [10.1, 5.0], [10.2, 5.0], [10.3, 5.0], [10.4, 5.0], [10.5, 5.0], [10.6, 5.0], [10.7, 5.0], [10.8, 5.0], [10.9, 5.0], [11.0, 5.0], [11.1, 5.0], [11.2, 5.0], [11.3, 5.0], [11.4, 5.0], [11.5, 5.0], [11.6, 5.0], [11.7, 5.0], [11.8, 5.0], [11.9, 5.0], [12.0, 5.0], [12.1, 5.0], [12.2, 5.0], [12.3, 5.0], [12.4, 5.0], [12.5, 5.0], [12.6, 5.0], [12.7, 5.0], [12.8, 5.0], [12.9, 6.0], [13.0, 6.0], [13.1, 6.0], [13.2, 6.0], [13.3, 6.0], [13.4, 6.0], [13.5, 6.0], [13.6, 6.0], [13.7, 6.0], [13.8, 6.0], [13.9, 6.0], [14.0, 6.0], [14.1, 6.0], [14.2, 6.0], [14.3, 6.0], [14.4, 6.0], [14.5, 6.0], [14.6, 6.0], [14.7, 6.0], [14.8, 6.0], [14.9, 6.0], [15.0, 6.0], [15.1, 6.0], [15.2, 6.0], [15.3, 6.0], [15.4, 6.0], [15.5, 6.0], [15.6, 6.0], [15.7, 6.0], [15.8, 6.0], [15.9, 6.0], [16.0, 6.0], [16.1, 6.0], [16.2, 6.0], [16.3, 6.0], [16.4, 6.0], [16.5, 6.0], [16.6, 6.0], [16.7, 6.0], [16.8, 6.0], [16.9, 6.0], [17.0, 6.0], [17.1, 6.0], [17.2, 6.0], [17.3, 6.0], [17.4, 6.0], [17.5, 6.0], [17.6, 6.0], [17.7, 6.0], [17.8, 6.0], [17.9, 6.0], [18.0, 6.0], [18.1, 6.0], [18.2, 7.0], [18.3, 7.0], [18.4, 7.0], [18.5, 7.0], [18.6, 7.0], [18.7, 7.0], [18.8, 7.0], [18.9, 7.0], [19.0, 7.0], [19.1, 7.0], [19.2, 7.0], [19.3, 7.0], [19.4, 7.0], [19.5, 7.0], [19.6, 7.0], [19.7, 7.0], [19.8, 7.0], [19.9, 7.0], [20.0, 7.0], [20.1, 7.0], [20.2, 7.0], [20.3, 7.0], [20.4, 7.0], [20.5, 7.0], [20.6, 7.0], [20.7, 7.0], [20.8, 7.0], [20.9, 7.0], [21.0, 7.0], [21.1, 7.0], [21.2, 7.0], [21.3, 7.0], [21.4, 7.0], [21.5, 7.0], [21.6, 7.0], [21.7, 7.0], [21.8, 7.0], [21.9, 7.0], [22.0, 7.0], [22.1, 7.0], [22.2, 7.0], [22.3, 7.0], [22.4, 7.0], [22.5, 7.0], [22.6, 7.0], [22.7, 7.0], [22.8, 7.0], [22.9, 7.0], [23.0, 7.0], [23.1, 7.0], [23.2, 7.0], [23.3, 7.0], [23.4, 7.0], [23.5, 7.0], [23.6, 7.0], [23.7, 7.0], [23.8, 7.0], [23.9, 7.0], [24.0, 7.0], [24.1, 7.0], [24.2, 7.0], [24.3, 7.0], [24.4, 7.0], [24.5, 7.0], [24.6, 7.0], [24.7, 7.0], [24.8, 7.0], [24.9, 7.0], [25.0, 7.0], [25.1, 7.0], [25.2, 7.0], [25.3, 7.0], [25.4, 7.0], [25.5, 7.0], [25.6, 7.0], [25.7, 7.0], [25.8, 7.0], [25.9, 7.0], [26.0, 7.0], [26.1, 7.0], [26.2, 7.0], [26.3, 7.0], [26.4, 7.0], [26.5, 7.0], [26.6, 7.0], [26.7, 7.0], [26.8, 7.0], [26.9, 7.0], [27.0, 7.0], [27.1, 7.0], [27.2, 7.0], [27.3, 7.0], [27.4, 7.0], [27.5, 7.0], [27.6, 7.0], [27.7, 7.0], [27.8, 7.0], [27.9, 7.0], [28.0, 7.0], [28.1, 7.0], [28.2, 7.0], [28.3, 7.0], [28.4, 7.0], [28.5, 7.0], [28.6, 7.0], [28.7, 7.0], [28.8, 7.0], [28.9, 7.0], [29.0, 7.0], [29.1, 7.0], [29.2, 7.0], [29.3, 7.0], [29.4, 7.0], [29.5, 7.0], [29.6, 7.0], [29.7, 7.0], [29.8, 7.0], [29.9, 7.0], [30.0, 7.0], [30.1, 7.0], [30.2, 7.0], [30.3, 7.0], [30.4, 7.0], [30.5, 7.0], [30.6, 7.0], [30.7, 7.0], [30.8, 7.0], [30.9, 7.0], [31.0, 7.0], [31.1, 7.0], [31.2, 7.0], [31.3, 8.0], [31.4, 8.0], [31.5, 8.0], [31.6, 8.0], [31.7, 8.0], [31.8, 8.0], [31.9, 8.0], [32.0, 8.0], [32.1, 8.0], [32.2, 8.0], [32.3, 8.0], [32.4, 8.0], [32.5, 8.0], [32.6, 8.0], [32.7, 8.0], [32.8, 8.0], [32.9, 8.0], [33.0, 8.0], [33.1, 8.0], [33.2, 8.0], [33.3, 8.0], [33.4, 8.0], [33.5, 8.0], [33.6, 8.0], [33.7, 8.0], [33.8, 8.0], [33.9, 8.0], [34.0, 8.0], [34.1, 8.0], [34.2, 8.0], [34.3, 8.0], [34.4, 8.0], [34.5, 8.0], [34.6, 8.0], [34.7, 8.0], [34.8, 8.0], [34.9, 8.0], [35.0, 8.0], [35.1, 8.0], [35.2, 8.0], [35.3, 8.0], [35.4, 8.0], [35.5, 8.0], [35.6, 8.0], [35.7, 8.0], [35.8, 8.0], [35.9, 8.0], [36.0, 8.0], [36.1, 8.0], [36.2, 8.0], [36.3, 8.0], [36.4, 8.0], [36.5, 8.0], [36.6, 8.0], [36.7, 8.0], [36.8, 8.0], [36.9, 8.0], [37.0, 8.0], [37.1, 8.0], [37.2, 8.0], [37.3, 8.0], [37.4, 8.0], [37.5, 8.0], [37.6, 8.0], [37.7, 8.0], [37.8, 8.0], [37.9, 8.0], [38.0, 8.0], [38.1, 8.0], [38.2, 8.0], [38.3, 8.0], [38.4, 8.0], [38.5, 8.0], [38.6, 8.0], [38.7, 8.0], [38.8, 8.0], [38.9, 8.0], [39.0, 8.0], [39.1, 8.0], [39.2, 8.0], [39.3, 8.0], [39.4, 8.0], [39.5, 8.0], [39.6, 8.0], [39.7, 8.0], [39.8, 8.0], [39.9, 8.0], [40.0, 8.0], [40.1, 8.0], [40.2, 8.0], [40.3, 8.0], [40.4, 8.0], [40.5, 8.0], [40.6, 8.0], [40.7, 8.0], [40.8, 8.0], [40.9, 8.0], [41.0, 8.0], [41.1, 8.0], [41.2, 8.0], [41.3, 8.0], [41.4, 8.0], [41.5, 8.0], [41.6, 8.0], [41.7, 8.0], [41.8, 8.0], [41.9, 8.0], [42.0, 8.0], [42.1, 8.0], [42.2, 8.0], [42.3, 8.0], [42.4, 8.0], [42.5, 8.0], [42.6, 8.0], [42.7, 8.0], [42.8, 8.0], [42.9, 8.0], [43.0, 8.0], [43.1, 8.0], [43.2, 8.0], [43.3, 8.0], [43.4, 8.0], [43.5, 8.0], [43.6, 8.0], [43.7, 8.0], [43.8, 8.0], [43.9, 8.0], [44.0, 8.0], [44.1, 8.0], [44.2, 8.0], [44.3, 8.0], [44.4, 8.0], [44.5, 8.0], [44.6, 8.0], [44.7, 8.0], [44.8, 8.0], [44.9, 8.0], [45.0, 8.0], [45.1, 8.0], [45.2, 8.0], [45.3, 8.0], [45.4, 8.0], [45.5, 8.0], [45.6, 8.0], [45.7, 8.0], [45.8, 8.0], [45.9, 8.0], [46.0, 8.0], [46.1, 8.0], [46.2, 8.0], [46.3, 8.0], [46.4, 8.0], [46.5, 8.0], [46.6, 8.0], [46.7, 8.0], [46.8, 8.0], [46.9, 8.0], [47.0, 8.0], [47.1, 8.0], [47.2, 8.0], [47.3, 8.0], [47.4, 8.0], [47.5, 8.0], [47.6, 8.0], [47.7, 8.0], [47.8, 8.0], [47.9, 8.0], [48.0, 8.0], [48.1, 8.0], [48.2, 8.0], [48.3, 8.0], [48.4, 8.0], [48.5, 8.0], [48.6, 8.0], [48.7, 8.0], [48.8, 8.0], [48.9, 8.0], [49.0, 8.0], [49.1, 8.0], [49.2, 8.0], [49.3, 8.0], [49.4, 8.0], [49.5, 8.0], [49.6, 8.0], [49.7, 8.0], [49.8, 8.0], [49.9, 8.0], [50.0, 8.0], [50.1, 8.0], [50.2, 8.0], [50.3, 8.0], [50.4, 8.0], [50.5, 8.0], [50.6, 8.0], [50.7, 8.0], [50.8, 8.0], [50.9, 8.0], [51.0, 8.0], [51.1, 8.0], [51.2, 8.0], [51.3, 8.0], [51.4, 8.0], [51.5, 8.0], [51.6, 8.0], [51.7, 8.0], [51.8, 8.0], [51.9, 8.0], [52.0, 8.0], [52.1, 8.0], [52.2, 8.0], [52.3, 8.0], [52.4, 8.0], [52.5, 8.0], [52.6, 8.0], [52.7, 8.0], [52.8, 8.0], [52.9, 8.0], [53.0, 9.0], [53.1, 9.0], [53.2, 9.0], [53.3, 9.0], [53.4, 9.0], [53.5, 9.0], [53.6, 9.0], [53.7, 9.0], [53.8, 9.0], [53.9, 9.0], [54.0, 9.0], [54.1, 9.0], [54.2, 9.0], [54.3, 9.0], [54.4, 9.0], [54.5, 9.0], [54.6, 9.0], [54.7, 9.0], [54.8, 9.0], [54.9, 9.0], [55.0, 9.0], [55.1, 9.0], [55.2, 9.0], [55.3, 9.0], [55.4, 9.0], [55.5, 9.0], [55.6, 9.0], [55.7, 9.0], [55.8, 9.0], [55.9, 9.0], [56.0, 9.0], [56.1, 9.0], [56.2, 9.0], [56.3, 9.0], [56.4, 9.0], [56.5, 9.0], [56.6, 9.0], [56.7, 9.0], [56.8, 9.0], [56.9, 9.0], [57.0, 9.0], [57.1, 9.0], [57.2, 9.0], [57.3, 9.0], [57.4, 9.0], [57.5, 9.0], [57.6, 9.0], [57.7, 9.0], [57.8, 9.0], [57.9, 9.0], [58.0, 9.0], [58.1, 9.0], [58.2, 9.0], [58.3, 9.0], [58.4, 9.0], [58.5, 9.0], [58.6, 9.0], [58.7, 9.0], [58.8, 9.0], [58.9, 9.0], [59.0, 9.0], [59.1, 9.0], [59.2, 9.0], [59.3, 9.0], [59.4, 9.0], [59.5, 9.0], [59.6, 9.0], [59.7, 9.0], [59.8, 9.0], [59.9, 9.0], [60.0, 9.0], [60.1, 9.0], [60.2, 9.0], [60.3, 9.0], [60.4, 9.0], [60.5, 9.0], [60.6, 9.0], [60.7, 9.0], [60.8, 9.0], [60.9, 9.0], [61.0, 9.0], [61.1, 9.0], [61.2, 9.0], [61.3, 9.0], [61.4, 9.0], [61.5, 9.0], [61.6, 9.0], [61.7, 9.0], [61.8, 9.0], [61.9, 9.0], [62.0, 9.0], [62.1, 9.0], [62.2, 9.0], [62.3, 9.0], [62.4, 9.0], [62.5, 9.0], [62.6, 9.0], [62.7, 9.0], [62.8, 9.0], [62.9, 9.0], [63.0, 9.0], [63.1, 9.0], [63.2, 9.0], [63.3, 9.0], [63.4, 9.0], [63.5, 9.0], [63.6, 9.0], [63.7, 9.0], [63.8, 9.0], [63.9, 9.0], [64.0, 9.0], [64.1, 9.0], [64.2, 9.0], [64.3, 9.0], [64.4, 9.0], [64.5, 9.0], [64.6, 9.0], [64.7, 9.0], [64.8, 9.0], [64.9, 9.0], [65.0, 9.0], [65.1, 9.0], [65.2, 9.0], [65.3, 9.0], [65.4, 9.0], [65.5, 9.0], [65.6, 9.0], [65.7, 9.0], [65.8, 9.0], [65.9, 9.0], [66.0, 9.0], [66.1, 9.0], [66.2, 9.0], [66.3, 9.0], [66.4, 9.0], [66.5, 9.0], [66.6, 9.0], [66.7, 9.0], [66.8, 9.0], [66.9, 9.0], [67.0, 9.0], [67.1, 9.0], [67.2, 9.0], [67.3, 9.0], [67.4, 9.0], [67.5, 9.0], [67.6, 9.0], [67.7, 9.0], [67.8, 9.0], [67.9, 9.0], [68.0, 9.0], [68.1, 9.0], [68.2, 10.0], [68.3, 10.0], [68.4, 10.0], [68.5, 10.0], [68.6, 10.0], [68.7, 10.0], [68.8, 10.0], [68.9, 10.0], [69.0, 10.0], [69.1, 10.0], [69.2, 10.0], [69.3, 10.0], [69.4, 10.0], [69.5, 10.0], [69.6, 10.0], [69.7, 10.0], [69.8, 10.0], [69.9, 10.0], [70.0, 10.0], [70.1, 10.0], [70.2, 10.0], [70.3, 10.0], [70.4, 10.0], [70.5, 10.0], [70.6, 10.0], [70.7, 10.0], [70.8, 10.0], [70.9, 10.0], [71.0, 10.0], [71.1, 10.0], [71.2, 10.0], [71.3, 10.0], [71.4, 10.0], [71.5, 10.0], [71.6, 10.0], [71.7, 10.0], [71.8, 10.0], [71.9, 10.0], [72.0, 10.0], [72.1, 10.0], [72.2, 10.0], [72.3, 10.0], [72.4, 10.0], [72.5, 10.0], [72.6, 10.0], [72.7, 10.0], [72.8, 10.0], [72.9, 10.0], [73.0, 10.0], [73.1, 10.0], [73.2, 10.0], [73.3, 10.0], [73.4, 10.0], [73.5, 10.0], [73.6, 10.0], [73.7, 10.0], [73.8, 10.0], [73.9, 10.0], [74.0, 10.0], [74.1, 10.0], [74.2, 10.0], [74.3, 10.0], [74.4, 10.0], [74.5, 10.0], [74.6, 10.0], [74.7, 10.0], [74.8, 10.0], [74.9, 10.0], [75.0, 10.0], [75.1, 10.0], [75.2, 10.0], [75.3, 10.0], [75.4, 10.0], [75.5, 10.0], [75.6, 10.0], [75.7, 10.0], [75.8, 10.0], [75.9, 10.0], [76.0, 10.0], [76.1, 10.0], [76.2, 10.0], [76.3, 10.0], [76.4, 10.0], [76.5, 10.0], [76.6, 10.0], [76.7, 10.0], [76.8, 10.0], [76.9, 10.0], [77.0, 10.0], [77.1, 10.0], [77.2, 10.0], [77.3, 10.0], [77.4, 11.0], [77.5, 11.0], [77.6, 11.0], [77.7, 11.0], [77.8, 11.0], [77.9, 11.0], [78.0, 11.0], [78.1, 11.0], [78.2, 11.0], [78.3, 11.0], [78.4, 11.0], [78.5, 11.0], [78.6, 11.0], [78.7, 11.0], [78.8, 11.0], [78.9, 11.0], [79.0, 11.0], [79.1, 11.0], [79.2, 11.0], [79.3, 11.0], [79.4, 11.0], [79.5, 11.0], [79.6, 11.0], [79.7, 11.0], [79.8, 11.0], [79.9, 11.0], [80.0, 11.0], [80.1, 11.0], [80.2, 11.0], [80.3, 11.0], [80.4, 11.0], [80.5, 11.0], [80.6, 11.0], [80.7, 11.0], [80.8, 11.0], [80.9, 11.0], [81.0, 11.0], [81.1, 11.0], [81.2, 11.0], [81.3, 11.0], [81.4, 11.0], [81.5, 11.0], [81.6, 11.0], [81.7, 11.0], [81.8, 11.0], [81.9, 11.0], [82.0, 11.0], [82.1, 11.0], [82.2, 11.0], [82.3, 11.0], [82.4, 11.0], [82.5, 11.0], [82.6, 11.0], [82.7, 11.0], [82.8, 12.0], [82.9, 12.0], [83.0, 12.0], [83.1, 12.0], [83.2, 12.0], [83.3, 12.0], [83.4, 12.0], [83.5, 12.0], [83.6, 12.0], [83.7, 12.0], [83.8, 12.0], [83.9, 12.0], [84.0, 12.0], [84.1, 12.0], [84.2, 12.0], [84.3, 12.0], [84.4, 12.0], [84.5, 12.0], [84.6, 12.0], [84.7, 12.0], [84.8, 12.0], [84.9, 12.0], [85.0, 12.0], [85.1, 12.0], [85.2, 12.0], [85.3, 12.0], [85.4, 12.0], [85.5, 12.0], [85.6, 12.0], [85.7, 12.0], [85.8, 12.0], [85.9, 13.0], [86.0, 13.0], [86.1, 13.0], [86.2, 13.0], [86.3, 13.0], [86.4, 13.0], [86.5, 13.0], [86.6, 13.0], [86.7, 13.0], [86.8, 13.0], [86.9, 13.0], [87.0, 13.0], [87.1, 13.0], [87.2, 13.0], [87.3, 13.0], [87.4, 13.0], [87.5, 13.0], [87.6, 13.0], [87.7, 13.0], [87.8, 13.0], [87.9, 13.0], [88.0, 14.0], [88.1, 14.0], [88.2, 14.0], [88.3, 14.0], [88.4, 14.0], [88.5, 14.0], [88.6, 14.0], [88.7, 14.0], [88.8, 14.0], [88.9, 14.0], [89.0, 14.0], [89.1, 14.0], [89.2, 14.0], [89.3, 14.0], [89.4, 15.0], [89.5, 15.0], [89.6, 15.0], [89.7, 15.0], [89.8, 15.0], [89.9, 15.0], [90.0, 15.0], [90.1, 15.0], [90.2, 15.0], [90.3, 16.0], [90.4, 16.0], [90.5, 16.0], [90.6, 16.0], [90.7, 16.0], [90.8, 16.0], [90.9, 17.0], [91.0, 17.0], [91.1, 17.0], [91.2, 18.0], [91.3, 18.0], [91.4, 18.0], [91.5, 19.0], [91.6, 19.0], [91.7, 19.0], [91.8, 19.0], [91.9, 20.0], [92.0, 20.0], [92.1, 20.0], [92.2, 21.0], [92.3, 21.0], [92.4, 22.0], [92.5, 23.0], [92.6, 23.0], [92.7, 24.0], [92.8, 24.0], [92.9, 25.0], [93.0, 26.0], [93.1, 26.0], [93.2, 27.0], [93.3, 28.0], [93.4, 28.0], [93.5, 29.0], [93.6, 29.0], [93.7, 30.0], [93.8, 30.0], [93.9, 31.0], [94.0, 32.0], [94.1, 32.0], [94.2, 33.0], [94.3, 34.0], [94.4, 34.0], [94.5, 35.0], [94.6, 35.0], [94.7, 36.0], [94.8, 37.0], [94.9, 37.0], [95.0, 38.0], [95.1, 39.0], [95.2, 39.0], [95.3, 40.0], [95.4, 41.0], [95.5, 42.0], [95.6, 42.0], [95.7, 43.0], [95.8, 44.0], [95.9, 45.0], [96.0, 45.0], [96.1, 46.0], [96.2, 47.0], [96.3, 47.0], [96.4, 48.0], [96.5, 48.0], [96.6, 49.0], [96.7, 49.0], [96.8, 50.0], [96.9, 50.0], [97.0, 51.0], [97.1, 51.0], [97.2, 51.0], [97.3, 52.0], [97.4, 52.0], [97.5, 53.0], [97.6, 53.0], [97.7, 53.0], [97.8, 54.0], [97.9, 54.0], [98.0, 55.0], [98.1, 55.0], [98.2, 56.0], [98.3, 56.0], [98.4, 57.0], [98.5, 58.0], [98.6, 59.0], [98.7, 61.0], [98.8, 65.0], [98.9, 221.0], [99.0, 245.0], [99.1, 282.0], [99.2, 1010.0], [99.3, 1015.0], [99.4, 1019.0], [99.5, 1023.0], [99.6, 1028.0], [99.7, 1033.0], [99.8, 1041.0], [99.9, 1065.0]], "isOverall": false, "label": "nginx", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 3.0], [20.0, 3.0], [20.1, 3.0], [20.2, 3.0], [20.3, 3.0], [20.4, 3.0], [20.5, 3.0], [20.6, 3.0], [20.7, 3.0], [20.8, 3.0], [20.9, 3.0], [21.0, 3.0], [21.1, 3.0], [21.2, 3.0], [21.3, 3.0], [21.4, 3.0], [21.5, 3.0], [21.6, 3.0], [21.7, 3.0], [21.8, 3.0], [21.9, 3.0], [22.0, 3.0], [22.1, 3.0], [22.2, 3.0], [22.3, 3.0], [22.4, 3.0], [22.5, 3.0], [22.6, 3.0], [22.7, 3.0], [22.8, 3.0], [22.9, 3.0], [23.0, 3.0], [23.1, 4.0], [23.2, 4.0], [23.3, 4.0], [23.4, 4.0], [23.5, 4.0], [23.6, 4.0], [23.7, 4.0], [23.8, 4.0], [23.9, 4.0], [24.0, 4.0], [24.1, 4.0], [24.2, 4.0], [24.3, 4.0], [24.4, 4.0], [24.5, 4.0], [24.6, 4.0], [24.7, 4.0], [24.8, 4.0], [24.9, 4.0], [25.0, 4.0], [25.1, 4.0], [25.2, 4.0], [25.3, 4.0], [25.4, 4.0], [25.5, 4.0], [25.6, 4.0], [25.7, 4.0], [25.8, 4.0], [25.9, 4.0], [26.0, 4.0], [26.1, 4.0], [26.2, 4.0], [26.3, 4.0], [26.4, 4.0], [26.5, 4.0], [26.6, 4.0], [26.7, 4.0], [26.8, 4.0], [26.9, 4.0], [27.0, 5.0], [27.1, 5.0], [27.2, 5.0], [27.3, 5.0], [27.4, 5.0], [27.5, 5.0], [27.6, 5.0], [27.7, 5.0], [27.8, 5.0], [27.9, 5.0], [28.0, 5.0], [28.1, 5.0], [28.2, 5.0], [28.3, 5.0], [28.4, 5.0], [28.5, 5.0], [28.6, 5.0], [28.7, 5.0], [28.8, 5.0], [28.9, 5.0], [29.0, 5.0], [29.1, 5.0], [29.2, 5.0], [29.3, 5.0], [29.4, 5.0], [29.5, 5.0], [29.6, 5.0], [29.7, 5.0], [29.8, 5.0], [29.9, 5.0], [30.0, 5.0], [30.1, 5.0], [30.2, 5.0], [30.3, 5.0], [30.4, 5.0], [30.5, 5.0], [30.6, 5.0], [30.7, 5.0], [30.8, 5.0], [30.9, 5.0], [31.0, 5.0], [31.1, 5.0], [31.2, 5.0], [31.3, 5.0], [31.4, 5.0], [31.5, 5.0], [31.6, 5.0], [31.7, 5.0], [31.8, 6.0], [31.9, 6.0], [32.0, 6.0], [32.1, 6.0], [32.2, 6.0], [32.3, 6.0], [32.4, 6.0], [32.5, 6.0], [32.6, 6.0], [32.7, 6.0], [32.8, 6.0], [32.9, 6.0], [33.0, 6.0], [33.1, 6.0], [33.2, 6.0], [33.3, 6.0], [33.4, 6.0], [33.5, 6.0], [33.6, 6.0], [33.7, 6.0], [33.8, 6.0], [33.9, 6.0], [34.0, 6.0], [34.1, 6.0], [34.2, 6.0], [34.3, 6.0], [34.4, 6.0], [34.5, 6.0], [34.6, 6.0], [34.7, 6.0], [34.8, 6.0], [34.9, 6.0], [35.0, 6.0], [35.1, 6.0], [35.2, 6.0], [35.3, 6.0], [35.4, 6.0], [35.5, 6.0], [35.6, 6.0], [35.7, 6.0], [35.8, 6.0], [35.9, 6.0], [36.0, 6.0], [36.1, 6.0], [36.2, 6.0], [36.3, 6.0], [36.4, 6.0], [36.5, 6.0], [36.6, 6.0], [36.7, 6.0], [36.8, 6.0], [36.9, 6.0], [37.0, 6.0], [37.1, 6.0], [37.2, 6.0], [37.3, 6.0], [37.4, 6.0], [37.5, 6.0], [37.6, 6.0], [37.7, 7.0], [37.8, 7.0], [37.9, 7.0], [38.0, 7.0], [38.1, 7.0], [38.2, 7.0], [38.3, 7.0], [38.4, 7.0], [38.5, 7.0], [38.6, 7.0], [38.7, 7.0], [38.8, 7.0], [38.9, 7.0], [39.0, 7.0], [39.1, 7.0], [39.2, 7.0], [39.3, 7.0], [39.4, 7.0], [39.5, 7.0], [39.6, 7.0], [39.7, 7.0], [39.8, 7.0], [39.9, 7.0], [40.0, 7.0], [40.1, 7.0], [40.2, 7.0], [40.3, 7.0], [40.4, 7.0], [40.5, 7.0], [40.6, 7.0], [40.7, 7.0], [40.8, 7.0], [40.9, 7.0], [41.0, 7.0], [41.1, 7.0], [41.2, 7.0], [41.3, 7.0], [41.4, 7.0], [41.5, 7.0], [41.6, 7.0], [41.7, 7.0], [41.8, 7.0], [41.9, 7.0], [42.0, 7.0], [42.1, 7.0], [42.2, 7.0], [42.3, 7.0], [42.4, 7.0], [42.5, 7.0], [42.6, 7.0], [42.7, 7.0], [42.8, 7.0], [42.9, 7.0], [43.0, 7.0], [43.1, 7.0], [43.2, 7.0], [43.3, 7.0], [43.4, 7.0], [43.5, 7.0], [43.6, 7.0], [43.7, 7.0], [43.8, 7.0], [43.9, 7.0], [44.0, 7.0], [44.1, 7.0], [44.2, 7.0], [44.3, 7.0], [44.4, 7.0], [44.5, 7.0], [44.6, 7.0], [44.7, 7.0], [44.8, 8.0], [44.9, 8.0], [45.0, 8.0], [45.1, 8.0], [45.2, 8.0], [45.3, 8.0], [45.4, 8.0], [45.5, 8.0], [45.6, 8.0], [45.7, 8.0], [45.8, 8.0], [45.9, 8.0], [46.0, 8.0], [46.1, 8.0], [46.2, 8.0], [46.3, 8.0], [46.4, 8.0], [46.5, 8.0], [46.6, 8.0], [46.7, 8.0], [46.8, 8.0], [46.9, 8.0], [47.0, 8.0], [47.1, 8.0], [47.2, 8.0], [47.3, 8.0], [47.4, 8.0], [47.5, 8.0], [47.6, 8.0], [47.7, 8.0], [47.8, 8.0], [47.9, 8.0], [48.0, 8.0], [48.1, 8.0], [48.2, 8.0], [48.3, 8.0], [48.4, 8.0], [48.5, 8.0], [48.6, 8.0], [48.7, 8.0], [48.8, 8.0], [48.9, 8.0], [49.0, 8.0], [49.1, 8.0], [49.2, 8.0], [49.3, 8.0], [49.4, 8.0], [49.5, 8.0], [49.6, 8.0], [49.7, 8.0], [49.8, 8.0], [49.9, 8.0], [50.0, 8.0], [50.1, 8.0], [50.2, 8.0], [50.3, 8.0], [50.4, 8.0], [50.5, 8.0], [50.6, 8.0], [50.7, 8.0], [50.8, 8.0], [50.9, 8.0], [51.0, 8.0], [51.1, 8.0], [51.2, 8.0], [51.3, 8.0], [51.4, 8.0], [51.5, 8.0], [51.6, 8.0], [51.7, 8.0], [51.8, 8.0], [51.9, 8.0], [52.0, 8.0], [52.1, 8.0], [52.2, 8.0], [52.3, 8.0], [52.4, 8.0], [52.5, 8.0], [52.6, 8.0], [52.7, 8.0], [52.8, 8.0], [52.9, 8.0], [53.0, 8.0], [53.1, 8.0], [53.2, 9.0], [53.3, 9.0], [53.4, 9.0], [53.5, 9.0], [53.6, 9.0], [53.7, 9.0], [53.8, 9.0], [53.9, 9.0], [54.0, 9.0], [54.1, 9.0], [54.2, 9.0], [54.3, 9.0], [54.4, 9.0], [54.5, 9.0], [54.6, 9.0], [54.7, 9.0], [54.8, 9.0], [54.9, 9.0], [55.0, 9.0], [55.1, 9.0], [55.2, 9.0], [55.3, 9.0], [55.4, 9.0], [55.5, 9.0], [55.6, 9.0], [55.7, 9.0], [55.8, 9.0], [55.9, 9.0], [56.0, 9.0], [56.1, 9.0], [56.2, 9.0], [56.3, 9.0], [56.4, 9.0], [56.5, 9.0], [56.6, 9.0], [56.7, 9.0], [56.8, 9.0], [56.9, 9.0], [57.0, 9.0], [57.1, 9.0], [57.2, 9.0], [57.3, 9.0], [57.4, 9.0], [57.5, 9.0], [57.6, 9.0], [57.7, 9.0], [57.8, 9.0], [57.9, 9.0], [58.0, 9.0], [58.1, 9.0], [58.2, 9.0], [58.3, 9.0], [58.4, 9.0], [58.5, 9.0], [58.6, 9.0], [58.7, 9.0], [58.8, 9.0], [58.9, 9.0], [59.0, 9.0], [59.1, 9.0], [59.2, 9.0], [59.3, 9.0], [59.4, 9.0], [59.5, 9.0], [59.6, 9.0], [59.7, 9.0], [59.8, 9.0], [59.9, 9.0], [60.0, 9.0], [60.1, 9.0], [60.2, 9.0], [60.3, 9.0], [60.4, 9.0], [60.5, 9.0], [60.6, 9.0], [60.7, 9.0], [60.8, 9.0], [60.9, 9.0], [61.0, 9.0], [61.1, 9.0], [61.2, 9.0], [61.3, 9.0], [61.4, 9.0], [61.5, 9.0], [61.6, 9.0], [61.7, 9.0], [61.8, 9.0], [61.9, 10.0], [62.0, 10.0], [62.1, 10.0], [62.2, 10.0], [62.3, 10.0], [62.4, 10.0], [62.5, 10.0], [62.6, 10.0], [62.7, 10.0], [62.8, 10.0], [62.9, 10.0], [63.0, 10.0], [63.1, 10.0], [63.2, 10.0], [63.3, 10.0], [63.4, 10.0], [63.5, 10.0], [63.6, 10.0], [63.7, 10.0], [63.8, 10.0], [63.9, 10.0], [64.0, 10.0], [64.1, 10.0], [64.2, 10.0], [64.3, 10.0], [64.4, 10.0], [64.5, 10.0], [64.6, 10.0], [64.7, 10.0], [64.8, 10.0], [64.9, 10.0], [65.0, 10.0], [65.1, 10.0], [65.2, 10.0], [65.3, 10.0], [65.4, 10.0], [65.5, 10.0], [65.6, 10.0], [65.7, 10.0], [65.8, 10.0], [65.9, 10.0], [66.0, 10.0], [66.1, 10.0], [66.2, 10.0], [66.3, 10.0], [66.4, 10.0], [66.5, 10.0], [66.6, 10.0], [66.7, 10.0], [66.8, 10.0], [66.9, 10.0], [67.0, 10.0], [67.1, 10.0], [67.2, 10.0], [67.3, 10.0], [67.4, 10.0], [67.5, 10.0], [67.6, 10.0], [67.7, 10.0], [67.8, 10.0], [67.9, 10.0], [68.0, 10.0], [68.1, 10.0], [68.2, 10.0], [68.3, 10.0], [68.4, 10.0], [68.5, 10.0], [68.6, 10.0], [68.7, 10.0], [68.8, 10.0], [68.9, 10.0], [69.0, 10.0], [69.1, 11.0], [69.2, 11.0], [69.3, 11.0], [69.4, 11.0], [69.5, 11.0], [69.6, 11.0], [69.7, 11.0], [69.8, 11.0], [69.9, 11.0], [70.0, 11.0], [70.1, 11.0], [70.2, 11.0], [70.3, 11.0], [70.4, 11.0], [70.5, 11.0], [70.6, 11.0], [70.7, 11.0], [70.8, 11.0], [70.9, 11.0], [71.0, 11.0], [71.1, 11.0], [71.2, 11.0], [71.3, 11.0], [71.4, 11.0], [71.5, 11.0], [71.6, 11.0], [71.7, 11.0], [71.8, 11.0], [71.9, 11.0], [72.0, 11.0], [72.1, 11.0], [72.2, 11.0], [72.3, 11.0], [72.4, 11.0], [72.5, 11.0], [72.6, 11.0], [72.7, 11.0], [72.8, 11.0], [72.9, 11.0], [73.0, 11.0], [73.1, 11.0], [73.2, 11.0], [73.3, 11.0], [73.4, 11.0], [73.5, 11.0], [73.6, 11.0], [73.7, 11.0], [73.8, 11.0], [73.9, 11.0], [74.0, 11.0], [74.1, 11.0], [74.2, 11.0], [74.3, 11.0], [74.4, 11.0], [74.5, 12.0], [74.6, 12.0], [74.7, 12.0], [74.8, 12.0], [74.9, 12.0], [75.0, 12.0], [75.1, 12.0], [75.2, 12.0], [75.3, 12.0], [75.4, 12.0], [75.5, 12.0], [75.6, 12.0], [75.7, 12.0], [75.8, 12.0], [75.9, 12.0], [76.0, 12.0], [76.1, 12.0], [76.2, 12.0], [76.3, 12.0], [76.4, 12.0], [76.5, 12.0], [76.6, 12.0], [76.7, 12.0], [76.8, 12.0], [76.9, 12.0], [77.0, 12.0], [77.1, 12.0], [77.2, 12.0], [77.3, 12.0], [77.4, 12.0], [77.5, 12.0], [77.6, 12.0], [77.7, 12.0], [77.8, 12.0], [77.9, 12.0], [78.0, 12.0], [78.1, 12.0], [78.2, 12.0], [78.3, 12.0], [78.4, 13.0], [78.5, 13.0], [78.6, 13.0], [78.7, 13.0], [78.8, 13.0], [78.9, 13.0], [79.0, 13.0], [79.1, 13.0], [79.2, 13.0], [79.3, 13.0], [79.4, 13.0], [79.5, 13.0], [79.6, 13.0], [79.7, 13.0], [79.8, 13.0], [79.9, 13.0], [80.0, 13.0], [80.1, 13.0], [80.2, 13.0], [80.3, 13.0], [80.4, 13.0], [80.5, 13.0], [80.6, 13.0], [80.7, 13.0], [80.8, 13.0], [80.9, 13.0], [81.0, 13.0], [81.1, 14.0], [81.2, 14.0], [81.3, 14.0], [81.4, 14.0], [81.5, 14.0], [81.6, 14.0], [81.7, 14.0], [81.8, 14.0], [81.9, 14.0], [82.0, 14.0], [82.1, 14.0], [82.2, 14.0], [82.3, 14.0], [82.4, 14.0], [82.5, 14.0], [82.6, 14.0], [82.7, 14.0], [82.8, 14.0], [82.9, 14.0], [83.0, 14.0], [83.1, 15.0], [83.2, 15.0], [83.3, 15.0], [83.4, 15.0], [83.5, 15.0], [83.6, 15.0], [83.7, 15.0], [83.8, 15.0], [83.9, 15.0], [84.0, 15.0], [84.1, 15.0], [84.2, 15.0], [84.3, 15.0], [84.4, 15.0], [84.5, 15.0], [84.6, 16.0], [84.7, 16.0], [84.8, 16.0], [84.9, 16.0], [85.0, 16.0], [85.1, 16.0], [85.2, 16.0], [85.3, 16.0], [85.4, 16.0], [85.5, 16.0], [85.6, 16.0], [85.7, 17.0], [85.8, 17.0], [85.9, 17.0], [86.0, 17.0], [86.1, 17.0], [86.2, 17.0], [86.3, 17.0], [86.4, 17.0], [86.5, 18.0], [86.6, 18.0], [86.7, 18.0], [86.8, 18.0], [86.9, 18.0], [87.0, 18.0], [87.1, 18.0], [87.2, 19.0], [87.3, 19.0], [87.4, 19.0], [87.5, 19.0], [87.6, 19.0], [87.7, 19.0], [87.8, 20.0], [87.9, 20.0], [88.0, 20.0], [88.1, 20.0], [88.2, 20.0], [88.3, 20.0], [88.4, 21.0], [88.5, 21.0], [88.6, 21.0], [88.7, 21.0], [88.8, 22.0], [88.9, 22.0], [89.0, 22.0], [89.1, 22.0], [89.2, 23.0], [89.3, 23.0], [89.4, 23.0], [89.5, 23.0], [89.6, 24.0], [89.7, 24.0], [89.8, 24.0], [89.9, 25.0], [90.0, 25.0], [90.1, 25.0], [90.2, 26.0], [90.3, 26.0], [90.4, 26.0], [90.5, 27.0], [90.6, 27.0], [90.7, 27.0], [90.8, 28.0], [90.9, 28.0], [91.0, 29.0], [91.1, 29.0], [91.2, 30.0], [91.3, 30.0], [91.4, 31.0], [91.5, 31.0], [91.6, 32.0], [91.7, 32.0], [91.8, 33.0], [91.9, 33.0], [92.0, 34.0], [92.1, 34.0], [92.2, 35.0], [92.3, 36.0], [92.4, 36.0], [92.5, 37.0], [92.6, 37.0], [92.7, 38.0], [92.8, 38.0], [92.9, 39.0], [93.0, 40.0], [93.1, 40.0], [93.2, 41.0], [93.3, 41.0], [93.4, 42.0], [93.5, 43.0], [93.6, 43.0], [93.7, 44.0], [93.8, 44.0], [93.9, 45.0], [94.0, 46.0], [94.1, 46.0], [94.2, 47.0], [94.3, 48.0], [94.4, 48.0], [94.5, 49.0], [94.6, 49.0], [94.7, 50.0], [94.8, 51.0], [94.9, 51.0], [95.0, 52.0], [95.1, 53.0], [95.2, 53.0], [95.3, 54.0], [95.4, 55.0], [95.5, 55.0], [95.6, 56.0], [95.7, 57.0], [95.8, 58.0], [95.9, 58.0], [96.0, 59.0], [96.1, 60.0], [96.2, 61.0], [96.3, 62.0], [96.4, 63.0], [96.5, 64.0], [96.6, 65.0], [96.7, 66.0], [96.8, 67.0], [96.9, 68.0], [97.0, 69.0], [97.1, 70.0], [97.2, 71.0], [97.3, 72.0], [97.4, 73.0], [97.5, 75.0], [97.6, 76.0], [97.7, 77.0], [97.8, 78.0], [97.9, 80.0], [98.0, 81.0], [98.1, 83.0], [98.2, 85.0], [98.3, 87.0], [98.4, 90.0], [98.5, 92.0], [98.6, 95.0], [98.7, 98.0], [98.8, 102.0], [98.9, 110.0], [99.0, 129.0], [99.1, 220.0], [99.2, 238.0], [99.3, 1005.0], [99.4, 1012.0], [99.5, 1017.0], [99.6, 1022.0], [99.7, 1027.0], [99.8, 1033.0], [99.9, 1046.0]], "isOverall": false, "label": "pipy", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 6637732.0, "series": [{"data": [[0.0, 6297076.0], [600.0, 68.0], [700.0, 8.0], [800.0, 11.0], [900.0, 3.0], [1000.0, 50747.0], [1100.0, 63.0], [1200.0, 291.0], [1300.0, 160.0], [1400.0, 22.0], [1500.0, 19.0], [1600.0, 5.0], [1800.0, 1.0], [2000.0, 211.0], [2300.0, 1.0], [2500.0, 1.0], [2600.0, 1.0], [2800.0, 3.0], [3000.0, 447.0], [3100.0, 27.0], [3300.0, 49.0], [3200.0, 12.0], [3400.0, 55.0], [3500.0, 426.0], [4000.0, 4.0], [4300.0, 26.0], [4200.0, 3.0], [4500.0, 11.0], [4400.0, 50.0], [6300.0, 51.0], [6500.0, 61.0], [6400.0, 94.0], [6600.0, 12.0], [6800.0, 9.0], [6700.0, 44.0], [7100.0, 15.0], [7300.0, 5.0], [7200.0, 7.0], [8900.0, 4.0], [10900.0, 1.0], [13500.0, 1.0], [15300.0, 1.0], [100.0, 77.0], [36300.0, 1.0], [36700.0, 3.0], [200.0, 20369.0], [300.0, 1033.0], [400.0, 773.0], [500.0, 182.0]], "isOverall": false, "label": "nginx", "isController": false}, {"data": [[0.0, 6637732.0], [2100.0, 14.0], [2200.0, 6.0], [600.0, 32.0], [700.0, 2.0], [3000.0, 231.0], [200.0, 17242.0], [3200.0, 26.0], [3300.0, 5.0], [800.0, 2.0], [3400.0, 40.0], [3500.0, 2.0], [900.0, 6.0], [1000.0, 46608.0], [1100.0, 749.0], [1200.0, 264.0], [300.0, 85.0], [1300.0, 48.0], [1500.0, 2.0], [400.0, 88.0], [100.0, 19325.0], [500.0, 24.0], [2000.0, 152.0]], "isOverall": false, "label": "pipy", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 36700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2139.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1.2993807E7, "series": [{"data": [[0.0, 1.2993807E7]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 99283.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2139.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 21.81986783900407, "minX": 1.65932718E12, "maxY": 200.0, "series": [{"data": [[1.65932736E12, 199.99432761369403], [1.65932724E12, 161.3766021612103], [1.6593273E12, 200.0], [1.65932718E12, 21.857191398475706]], "isOverall": false, "label": "192.168.10.33-线程组", "isController": false}, {"data": [[1.65932736E12, 199.9855005368065], [1.65932724E12, 161.7319847437552], [1.6593273E12, 200.0], [1.65932718E12, 22.1912420382166]], "isOverall": false, "label": "192.168.10.31-线程组", "isController": false}, {"data": [[1.65932736E12, 199.986429325318], [1.65932724E12, 161.52730790766535], [1.6593273E12, 200.0], [1.65932718E12, 21.81986783900407]], "isOverall": false, "label": "192.168.10.32-线程组", "isController": false}, {"data": [[1.65932736E12, 199.9995654392977], [1.65932724E12, 162.0495239193769], [1.6593273E12, 200.0], [1.65932718E12, 22.998117347197123]], "isOverall": false, "label": "192.168.10.42-线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65932736E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.3595918367346944, "minX": 1.0, "maxY": 69.13737836290781, "series": [{"data": [[2.0, 0.3595918367346944], [3.0, 0.3858520900321537], [4.0, 0.4812994812994812], [5.0, 0.5594149908592306], [6.0, 1.3425272610647847], [7.0, 0.7936962750716325], [8.0, 0.8239728609121743], [9.0, 1.055424314010541], [10.0, 0.8984142715559981], [11.0, 1.2940051020408159], [12.0, 1.069009180120291], [13.0, 1.1174058323207825], [14.0, 1.5151975683890637], [15.0, 1.3154735104307393], [16.0, 1.3733413751507857], [17.0, 1.3938575287928339], [18.0, 1.4303273028587193], [19.0, 1.5132143351321417], [20.0, 1.8808411214953278], [21.0, 2.0582801249830243], [22.0, 1.7455516014234922], [23.0, 1.6790523045054353], [24.0, 1.8720118184260046], [25.0, 1.7922893381891294], [26.0, 1.9640154030009274], [27.0, 2.0315953712131085], [28.0, 2.1462893753336907], [29.0, 2.345741067789693], [30.0, 2.2120206978904053], [31.0, 2.421915210618982], [32.0, 2.3591628959275996], [33.0, 2.375034712579841], [34.0, 2.421892039258445], [35.0, 3.0027878449958267], [36.0, 4.075169030889573], [37.0, 2.5360010888798117], [38.0, 3.8678544914625204], [39.0, 2.9917410416944197], [40.0, 2.6697832554186016], [41.0, 2.9191366906474783], [42.0, 2.806944028733904], [43.0, 4.13258495145631], [44.0, 4.412424503882659], [45.0, 3.151215706670134], [46.0, 5.328280865397068], [47.0, 4.028970377136895], [48.0, 4.343324250681205], [49.0, 3.6346708628376767], [50.0, 3.6961135259524354], [51.0, 3.759141696292524], [52.0, 3.7768762677484684], [53.0, 4.200444560669445], [54.0, 4.355090311986854], [55.0, 4.577825735095762], [56.0, 4.23798494499131], [57.0, 3.8985022733351222], [58.0, 4.356597752185361], [59.0, 4.827084639498439], [60.0, 5.388224223685973], [61.0, 4.97625329815304], [62.0, 5.6935969058874205], [63.0, 5.891389728096693], [64.0, 4.994478858066242], [65.0, 5.2729213933004075], [66.0, 5.226795580110488], [67.0, 5.182429758607044], [68.0, 6.093169327401223], [69.0, 5.225508819538672], [70.0, 5.031884452922736], [71.0, 5.263472137170857], [72.0, 5.259743622944439], [73.0, 4.554227941176479], [74.0, 5.157983849960921], [75.0, 4.945787067276264], [76.0, 6.590641779595997], [77.0, 6.980900948366678], [78.0, 6.703585232573643], [79.0, 7.922957600827302], [80.0, 6.281873614190684], [81.0, 6.2899037058651945], [82.0, 5.160502346121983], [83.0, 5.863225629791867], [84.0, 5.266009852216765], [85.0, 4.299041788661156], [86.0, 5.805177111716591], [87.0, 7.552047673386588], [88.0, 7.932691088857918], [89.0, 7.207795698924724], [90.0, 10.87358616101132], [91.0, 6.268126045733416], [92.0, 8.91436345410283], [93.0, 9.159718534253807], [94.0, 8.975111234705206], [95.0, 6.222607767249424], [96.0, 6.820927569424554], [97.0, 6.377134271274427], [98.0, 6.894072447859503], [99.0, 9.581667815299744], [100.0, 10.487244182786666], [101.0, 9.006675749318788], [102.0, 6.98180050013893], [103.0, 7.080174721713364], [104.0, 5.988742236024852], [105.0, 6.119019218025186], [106.0, 7.262795408507768], [107.0, 9.07008619471527], [108.0, 7.882875605815831], [109.0, 10.250000000000025], [110.0, 13.926334184702311], [111.0, 10.4535601591439], [112.0, 7.339947636764497], [113.0, 7.817108753315651], [114.0, 7.0869507500332025], [115.0, 9.184002343978943], [116.0, 9.698679299454534], [117.0, 15.37924892385336], [118.0, 10.325618400115756], [119.0, 10.35312180143296], [120.0, 7.980476920931531], [121.0, 10.491714371798748], [122.0, 10.868246302444945], [123.0, 10.541252006420532], [124.0, 12.230074173971612], [125.0, 11.539897662840524], [126.0, 9.91853553093756], [127.0, 9.860807860262023], [128.0, 9.179808599541698], [129.0, 9.761355646181983], [130.0, 10.009947499309238], [131.0, 10.509815242494213], [132.0, 12.541847668693888], [133.0, 11.2344589937974], [134.0, 11.490789661573595], [135.0, 10.722826897271526], [136.0, 12.1501197014505], [137.0, 12.075096003413439], [138.0, 10.693041526374845], [139.0, 11.771432560737237], [140.0, 10.061812023708727], [141.0, 14.430879712746828], [142.0, 12.07778915046062], [143.0, 12.741098370549183], [144.0, 13.540302078660087], [145.0, 11.700014734050406], [146.0, 13.19321513332399], [147.0, 11.370972261137553], [148.0, 12.591941391941376], [149.0, 9.533063817499276], [150.0, 11.703234461171537], [151.0, 14.550792970424375], [152.0, 13.932515337423316], [153.0, 16.720554926387273], [154.0, 13.553771842591225], [155.0, 12.70920005584252], [156.0, 11.301440922190183], [157.0, 13.358021201413434], [158.0, 13.22069943289228], [159.0, 16.28213166144202], [160.0, 35.776903713027075], [161.0, 20.4184210526316], [162.0, 19.241904145077662], [163.0, 13.97554623064677], [164.0, 12.55270522388061], [165.0, 12.576476361851794], [166.0, 11.57659795343319], [167.0, 18.03651300775904], [168.0, 13.83007723761927], [169.0, 18.9300837776085], [170.0, 14.657931247109556], [171.0, 15.658982634086362], [172.0, 13.41728395061726], [173.0, 13.19875159597106], [174.0, 15.024021352313182], [175.0, 17.42196275495128], [176.0, 17.38009592326138], [177.0, 19.605379188712522], [178.0, 15.429102742910278], [179.0, 8.821106434155116], [180.0, 17.02268970698721], [181.0, 14.688556181440834], [182.0, 18.31693675605908], [183.0, 19.456905660377352], [184.0, 18.82164449818625], [185.0, 18.820757720471256], [186.0, 15.437152391546155], [187.0, 17.46009881718819], [188.0, 18.747212441314574], [189.0, 16.066320474777463], [190.0, 17.272330520803077], [191.0, 13.696899583526147], [192.0, 19.06598390636426], [193.0, 14.741520633126065], [194.0, 18.231402571139636], [195.0, 13.735647334504986], [196.0, 13.81153058238219], [197.0, 21.425550660792943], [198.0, 20.39649267022878], [199.0, 19.92791269597293], [200.0, 23.83306821512002], [1.0, 0.382488479262673]], "isOverall": false, "label": "nginx", "isController": false}, {"data": [[178.44325657068862, 20.544455244247278]], "isOverall": false, "label": "nginx-Aggregated", "isController": false}, {"data": [[2.0, 0.529220779220778], [3.0, 0.6308373590982286], [4.0, 0.7198805177563886], [5.0, 0.8220338983050836], [6.0, 0.890850722311396], [7.0, 0.9316860465116268], [8.0, 1.0897870280735724], [9.0, 1.3311071153352179], [10.0, 1.392161635832521], [11.0, 1.609465957985319], [12.0, 2.856667519836194], [13.0, 2.417858038625536], [14.0, 3.8043121631122583], [15.0, 1.9363254477116962], [16.0, 2.5015270506108234], [17.0, 2.0601001669449106], [18.0, 2.4570303451470954], [19.0, 3.0232451093210604], [20.0, 2.805372290292181], [21.0, 3.038535184298712], [22.0, 3.0096065873741935], [23.0, 2.9822750729190086], [24.0, 3.0906337875838257], [25.0, 3.2894678245379585], [26.0, 3.574759945130318], [27.0, 3.4326286568438977], [28.0, 3.5601204560120383], [29.0, 3.814480633802815], [30.0, 3.9629057187017076], [31.0, 4.337622111031695], [32.0, 4.352887468614465], [33.0, 4.083732555717567], [34.0, 4.351636520241169], [35.0, 4.963203463203445], [36.0, 5.688341271484779], [37.0, 6.551599915236289], [38.0, 4.821932449764852], [39.0, 5.046431642304397], [40.0, 5.576459684893414], [41.0, 5.126542564317097], [42.0, 4.979226224509234], [43.0, 5.5106529209621975], [44.0, 5.3745326132114615], [45.0, 4.347662018047593], [46.0, 5.161842344802472], [47.0, 5.824266975308641], [48.0, 5.51784080512352], [49.0, 6.099337748344373], [50.0, 6.070544554455443], [51.0, 5.812595419847338], [52.0, 5.50927947598254], [53.0, 5.570815450643795], [54.0, 4.952495586583203], [55.0, 5.413871023813659], [56.0, 5.327703916636722], [57.0, 5.471405376150087], [58.0, 5.516962843295636], [59.0, 6.968772563176893], [60.0, 7.7833111575746], [61.0, 6.009358516249779], [62.0, 8.08208701563557], [63.0, 6.123662110983039], [64.0, 6.128250975292589], [65.0, 6.829999999999983], [66.0, 7.52230070635722], [67.0, 7.843107552477807], [68.0, 9.215472235405855], [69.0, 7.63716814159291], [70.0, 8.45417075564278], [71.0, 8.639480821387055], [72.0, 8.644805455274765], [73.0, 7.991434689507496], [74.0, 9.620962827544188], [75.0, 8.459158177974247], [76.0, 7.7603933068828805], [77.0, 8.30728788977523], [78.0, 9.497045790251093], [79.0, 10.20518768452132], [80.0, 9.11464266029766], [81.0, 8.435862068965527], [82.0, 7.607871255576793], [83.0, 7.30632289748314], [84.0, 8.81607949412827], [85.0, 9.117680074836327], [86.0, 12.171146953405023], [87.0, 12.19000956022946], [88.0, 11.92279957582186], [89.0, 13.52119509703783], [90.0, 14.424896049896052], [91.0, 12.715639810426529], [92.0, 9.102291325695578], [93.0, 8.06026986506747], [94.0, 8.009281801582489], [95.0, 7.309921484653832], [96.0, 7.478026775320114], [97.0, 7.319251571407677], [98.0, 8.826205787781383], [99.0, 11.097346786248114], [100.0, 12.079881107189332], [101.0, 13.933511184075511], [102.0, 13.343715966020458], [103.0, 12.28707224334601], [104.0, 13.833692786963846], [105.0, 14.79157693228049], [106.0, 10.671568627450966], [107.0, 11.068820960698693], [108.0, 10.15547303842429], [109.0, 8.527460491315908], [110.0, 9.480856586632063], [111.0, 10.908686629113589], [112.0, 8.845402885035716], [113.0, 8.022345507782415], [114.0, 9.038807823657251], [115.0, 10.554487179487174], [116.0, 12.619453924914675], [117.0, 9.72728704141081], [118.0, 15.000000000000025], [119.0, 14.00219820479941], [120.0, 11.563939245467912], [121.0, 10.323056691992994], [122.0, 11.078670031171168], [123.0, 13.65511955855306], [124.0, 10.933427511919506], [125.0, 12.26583890480738], [126.0, 11.77130880298089], [127.0, 11.632833787465966], [128.0, 16.89737903225802], [129.0, 15.906580366774616], [130.0, 16.29318513119536], [131.0, 13.939359267734579], [132.0, 10.479706454994751], [133.0, 11.96925943176528], [134.0, 10.157034540859305], [135.0, 13.919076163610708], [136.0, 13.694464544138937], [137.0, 20.646487867177527], [138.0, 27.424932975871315], [139.0, 37.48624247635434], [140.0, 49.87566265060233], [141.0, 33.02059405940586], [142.0, 26.406496373383813], [143.0, 17.499320652173974], [144.0, 12.023085495940132], [145.0, 12.833112582781476], [146.0, 15.149246314394572], [147.0, 13.80504550534883], [148.0, 15.189992748368438], [149.0, 13.025278915407425], [150.0, 13.264133876074123], [151.0, 11.729569093610703], [152.0, 11.792348040728172], [153.0, 12.080197588260992], [154.0, 13.299699699699703], [155.0, 13.535146699266532], [156.0, 20.16909275558561], [157.0, 21.03490080822924], [158.0, 24.220529100529067], [159.0, 19.698853349426688], [160.0, 17.345762711864456], [161.0, 20.312450119712654], [162.0, 18.802449535041948], [163.0, 19.936785801118397], [164.0, 21.58846367165837], [165.0, 24.552279340446184], [166.0, 17.201598752193437], [167.0, 15.81583169905511], [168.0, 13.638109305760695], [169.0, 16.74920127795528], [170.0, 15.308695652173899], [171.0, 13.557409879839785], [172.0, 21.08687196110209], [173.0, 19.277455741814208], [174.0, 21.381100189687906], [175.0, 23.642288664228886], [176.0, 23.49270664505672], [177.0, 43.96998420221163], [178.0, 45.361829025844905], [179.0, 69.13737836290781], [180.0, 53.352654651729175], [181.0, 52.96889580093316], [182.0, 62.8413488114979], [183.0, 40.32949512843219], [184.0, 29.300576075906527], [185.0, 22.44152978671245], [186.0, 18.496041741633714], [187.0, 21.32296764009478], [188.0, 19.751383067896025], [189.0, 18.427930174563613], [190.0, 23.95859974424547], [191.0, 16.927165659383203], [192.0, 22.23953365129842], [193.0, 21.253733792877057], [194.0, 18.877051818474406], [195.0, 28.45442156268935], [196.0, 14.271935188015883], [197.0, 20.528713989832422], [198.0, 20.22496727748693], [199.0, 21.544284341978866], [200.0, 20.93601518655504], [1.0, 0.4919354838709674]], "isOverall": false, "label": "pipy", "isController": false}, {"data": [[185.34578966589515, 19.53946778705375]], "isOverall": false, "label": "pipy-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 788441.2, "minX": 1.65932718E12, "maxY": 8088862.1, "series": [{"data": [[1.65932736E12, 7474251.1], [1.65932724E12, 7340377.1], [1.6593273E12, 7321285.65], [1.65932718E12, 819251.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65932736E12, 7921230.733333333], [1.65932724E12, 7987863.366666666], [1.6593273E12, 8088862.1], [1.65932718E12, 788441.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65932736E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1.797604316772106, "minX": 1.65932718E12, "maxY": 23.99171196462192, "series": [{"data": [[1.65932736E12, 20.37859464134307], [1.65932724E12, 19.710845061636306], [1.6593273E12, 23.99171196462192], [1.65932718E12, 1.797604316772106]], "isOverall": false, "label": "nginx", "isController": false}, {"data": [[1.65932736E12, 20.916636154346353], [1.65932724E12, 18.106959945501686], [1.6593273E12, 20.85834225222434], [1.65932718E12, 2.8897495197190866]], "isOverall": false, "label": "pipy", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65932736E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1.7975064219033707, "minX": 1.65932718E12, "maxY": 23.991565939978415, "series": [{"data": [[1.65932736E12, 20.378428469730924], [1.65932724E12, 19.710692568120713], [1.6593273E12, 23.991565939978415], [1.65932718E12, 1.7975064219033707]], "isOverall": false, "label": "nginx", "isController": false}, {"data": [[1.65932736E12, 20.916472402210083], [1.65932724E12, 18.106814876527604], [1.6593273E12, 20.858181996022946], [1.65932718E12, 2.88963939160334]], "isOverall": false, "label": "pipy", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65932736E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.4457007207273371, "minX": 1.65932718E12, "maxY": 15.320196673467883, "series": [{"data": [[1.65932736E12, 14.095181400864096], [1.65932724E12, 13.049834683164994], [1.6593273E12, 15.320196673467883], [1.65932718E12, 0.8008935843618878]], "isOverall": false, "label": "nginx", "isController": false}, {"data": [[1.65932736E12, 10.973784683813834], [1.65932724E12, 9.603875297073813], [1.6593273E12, 11.278789895388618], [1.65932718E12, 0.4457007207273371]], "isOverall": false, "label": "pipy", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65932736E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.65932718E12, "maxY": 36773.0, "series": [{"data": [[1.65932736E12, 36773.0], [1.65932724E12, 7336.0], [1.6593273E12, 36361.0], [1.65932718E12, 1009.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65932736E12, 11.0], [1.65932724E12, 14.0], [1.6593273E12, 57.0], [1.65932718E12, 4.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65932736E12, 1023.0], [1.65932724E12, 1014.0], [1.6593273E12, 1051.0], [1.65932718E12, 5.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65932736E12, 22.0], [1.65932724E12, 17.0], [1.6593273E12, 61.0], [1.65932718E12, 4.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65932736E12, 0.0], [1.65932724E12, 0.0], [1.6593273E12, 0.0], [1.65932718E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65932736E12, 8.0], [1.65932724E12, 9.0], [1.6593273E12, 31.0], [1.65932718E12, 2.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65932736E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 70.0, "maxY": 1009.0, "series": [{"data": [[65551.0, 9.0], [74447.0, 8.0], [81567.0, 8.0], [85231.0, 9.0], [85007.0, 9.0], [82959.0, 8.0], [86207.0, 8.0], [88143.0, 9.0], [88895.0, 8.0], [90271.0, 7.0], [47231.0, 22.0], [48359.0, 30.0], [50335.0, 19.0], [49855.0, 14.0], [53751.0, 32.0], [54599.0, 13.0], [54415.0, 16.0], [54367.0, 16.0], [59255.0, 20.0], [61095.0, 16.0], [61831.0, 8.0], [76638.0, 12.0], [75886.0, 9.0], [75374.0, 8.0], [78878.0, 2.0], [81742.0, 10.0], [84366.0, 8.0], [85134.0, 9.0], [73581.0, 9.0], [75661.0, 9.0], [79405.0, 9.0], [82429.0, 8.0], [84525.0, 8.0], [89613.0, 8.0], [46790.0, 20.0], [50310.0, 28.0], [57126.0, 21.0], [65022.0, 1.0], [76572.0, 7.0], [77996.0, 9.0], [80860.0, 8.0], [81628.0, 10.0], [84156.0, 8.0], [89260.0, 9.0], [89788.0, 6.0], [75115.0, 9.0], [85499.0, 5.0], [84811.0, 9.0], [84059.0, 9.0], [82907.0, 8.0], [85451.0, 8.0], [85515.0, 9.0], [10567.0, 7.0], [88715.0, 7.0], [86027.0, 7.0], [89691.0, 7.0], [86699.0, 8.0], [46805.0, 21.0], [47853.0, 21.0], [51853.0, 18.0], [55637.0, 15.0], [57397.0, 21.0], [70.0, 1009.0], [75882.0, 9.0], [81498.0, 4.0], [83962.0, 9.0], [36028.0, 6.0], [76377.0, 8.0], [75257.0, 8.0], [84297.0, 4.0], [82921.0, 9.0], [84041.0, 8.0], [44140.0, 37.0], [87481.0, 8.0], [90537.0, 9.0], [47612.0, 28.0], [50252.0, 21.0], [54436.0, 14.0], [53540.0, 17.0], [57036.0, 26.0], [57044.0, 20.0], [55652.0, 12.0], [59116.0, 9.0], [63492.0, 13.0], [79208.0, 8.0], [80760.0, 9.0], [85256.0, 4.0], [85752.0, 8.0], [82840.0, 9.0], [88520.0, 8.0], [89032.0, 8.0], [73879.0, 8.0], [80135.0, 9.0], [78087.0, 8.0], [80551.0, 9.0], [78887.0, 8.0], [83447.0, 12.0], [41235.0, 10.0], [41483.0, 10.0], [83063.0, 9.0], [83831.0, 6.0], [54995.0, 15.0], [57091.0, 19.0], [57323.0, 15.0], [67974.0, 9.0], [1145.0, 0.0], [77158.0, 9.0], [77910.0, 2.0], [80134.0, 3.0], [78502.0, 8.0], [85174.0, 8.0], [82022.0, 8.0], [78101.0, 10.0], [82965.0, 9.0], [84693.0, 8.0], [84709.0, 6.0], [83909.0, 8.0], [86629.0, 8.0], [58162.0, 17.0], [60834.0, 9.0], [62026.0, 14.0], [73780.0, 8.0], [81284.0, 7.0], [79364.0, 12.0], [85412.0, 8.0], [82612.0, 8.0], [85988.0, 8.0], [86452.0, 9.0], [76531.0, 8.0], [80035.0, 5.0], [80051.0, 8.0], [79283.0, 8.0], [81779.0, 9.0], [84163.0, 8.0], [82179.0, 8.0], [43905.0, 15.0], [88947.0, 9.0], [48641.0, 24.0], [48881.0, 22.0], [47289.0, 29.0], [48241.0, 20.0], [51097.0, 20.0], [49361.0, 14.0], [52345.0, 24.0], [53777.0, 17.0], [53729.0, 19.0], [56537.0, 20.0], [58521.0, 8.0], [58161.0, 9.0], [62577.0, 11.0], [75314.0, 1.0], [79426.0, 8.0], [78306.0, 8.0], [84434.0, 10.0], [83986.0, 7.0], [83186.0, 8.0], [83106.0, 8.0], [86034.0, 9.0], [89058.0, 8.0], [40952.0, 1.0], [79601.0, 2.0], [82737.0, 8.0], [86593.0, 3.0], [87537.0, 9.0], [91761.0, 7.0], [54104.0, 20.0], [57000.0, 8.0], [56736.0, 17.0], [57640.0, 15.0], [68128.0, 8.0], [72304.0, 8.0], [77520.0, 10.0], [74656.0, 9.0], [79168.0, 10.0], [80976.0, 12.0], [81360.0, 7.0], [85248.0, 8.0], [84784.0, 10.0], [87248.0, 5.0], [88192.0, 8.0], [86960.0, 8.0], [87696.0, 8.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 91761.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 70.0, "maxY": 1009.0, "series": [{"data": [[65551.0, 9.0], [74447.0, 8.0], [81567.0, 8.0], [85231.0, 9.0], [85007.0, 9.0], [82959.0, 8.0], [86207.0, 8.0], [88143.0, 9.0], [88895.0, 8.0], [90271.0, 7.0], [47231.0, 22.0], [48359.0, 30.0], [50335.0, 19.0], [49855.0, 14.0], [53751.0, 32.0], [54599.0, 13.0], [54415.0, 16.0], [54367.0, 16.0], [59255.0, 20.0], [61095.0, 16.0], [61831.0, 8.0], [76638.0, 12.0], [75886.0, 9.0], [75374.0, 8.0], [78878.0, 2.0], [81742.0, 10.0], [84366.0, 8.0], [85134.0, 9.0], [73581.0, 9.0], [75661.0, 9.0], [79405.0, 9.0], [82429.0, 8.0], [84525.0, 8.0], [89613.0, 8.0], [46790.0, 20.0], [50310.0, 28.0], [57126.0, 21.0], [65022.0, 1.0], [76572.0, 7.0], [77996.0, 9.0], [80860.0, 8.0], [81628.0, 10.0], [84156.0, 8.0], [89260.0, 9.0], [89788.0, 6.0], [75115.0, 9.0], [85499.0, 5.0], [84811.0, 9.0], [84059.0, 9.0], [82907.0, 8.0], [85451.0, 8.0], [85515.0, 9.0], [10567.0, 7.0], [88715.0, 7.0], [86027.0, 7.0], [89691.0, 7.0], [86699.0, 8.0], [46805.0, 21.0], [47853.0, 21.0], [51853.0, 18.0], [55637.0, 15.0], [57397.0, 21.0], [70.0, 1009.0], [75882.0, 9.0], [81498.0, 4.0], [83962.0, 9.0], [36028.0, 6.0], [76377.0, 8.0], [75257.0, 8.0], [84297.0, 4.0], [82921.0, 9.0], [84041.0, 8.0], [44140.0, 37.0], [87481.0, 8.0], [90537.0, 9.0], [47612.0, 28.0], [50252.0, 21.0], [54436.0, 14.0], [53540.0, 17.0], [57036.0, 26.0], [57044.0, 20.0], [55652.0, 12.0], [59116.0, 9.0], [63492.0, 13.0], [79208.0, 8.0], [80760.0, 9.0], [85256.0, 4.0], [85752.0, 8.0], [82840.0, 9.0], [88520.0, 8.0], [89032.0, 8.0], [73879.0, 8.0], [80135.0, 9.0], [78087.0, 8.0], [80551.0, 9.0], [78887.0, 8.0], [83447.0, 12.0], [41235.0, 10.0], [41483.0, 10.0], [83063.0, 9.0], [83831.0, 6.0], [54995.0, 15.0], [57091.0, 19.0], [57323.0, 15.0], [67974.0, 9.0], [1145.0, 0.0], [77158.0, 9.0], [77910.0, 2.0], [80134.0, 3.0], [78502.0, 8.0], [85174.0, 8.0], [82022.0, 8.0], [78101.0, 10.0], [82965.0, 9.0], [84693.0, 8.0], [84709.0, 6.0], [83909.0, 8.0], [86629.0, 8.0], [58162.0, 17.0], [60834.0, 9.0], [62026.0, 14.0], [73780.0, 8.0], [81284.0, 7.0], [79364.0, 12.0], [85412.0, 8.0], [82612.0, 8.0], [85988.0, 8.0], [86452.0, 9.0], [76531.0, 8.0], [80035.0, 5.0], [80051.0, 8.0], [79283.0, 8.0], [81779.0, 9.0], [84163.0, 8.0], [82179.0, 8.0], [43905.0, 15.0], [88947.0, 9.0], [48641.0, 24.0], [48881.0, 22.0], [47289.0, 29.0], [48241.0, 20.0], [51097.0, 20.0], [49361.0, 14.0], [52345.0, 24.0], [53777.0, 17.0], [53729.0, 19.0], [56537.0, 20.0], [58521.0, 8.0], [58161.0, 9.0], [62577.0, 11.0], [75314.0, 1.0], [79426.0, 8.0], [78306.0, 8.0], [84434.0, 10.0], [83986.0, 7.0], [83186.0, 8.0], [83106.0, 8.0], [86034.0, 9.0], [89058.0, 8.0], [40952.0, 1.0], [79601.0, 2.0], [82737.0, 8.0], [86593.0, 3.0], [87537.0, 9.0], [91761.0, 7.0], [54104.0, 20.0], [57000.0, 8.0], [56736.0, 17.0], [57640.0, 15.0], [68128.0, 8.0], [72304.0, 8.0], [77520.0, 10.0], [74656.0, 9.0], [79168.0, 10.0], [80976.0, 12.0], [81360.0, 7.0], [85248.0, 8.0], [84784.0, 10.0], [87248.0, 5.0], [88192.0, 8.0], [86960.0, 8.0], [87696.0, 8.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 91761.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6985.616666666667, "minX": 1.65932718E12, "maxY": 71153.5, "series": [{"data": [[1.65932736E12, 69781.71666666666], [1.65932724E12, 70332.98333333334], [1.6593273E12, 71153.5], [1.65932718E12, 6985.616666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65932736E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6980.366666666667, "minX": 1.65932718E12, "maxY": 71153.35, "series": [{"data": [[1.65932736E12, 69808.23333333334], [1.65932724E12, 70311.86666666667], [1.6593273E12, 71153.35], [1.65932718E12, 6980.366666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65932736E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2724.1, "minX": 1.65932718E12, "maxY": 38168.05, "series": [{"data": [[1.65932736E12, 35304.86666666667], [1.65932724E12, 33662.63333333333], [1.6593273E12, 32985.3], [1.65932718E12, 4256.266666666666]], "isOverall": false, "label": "nginx-success", "isController": false}, {"data": [[1.65932736E12, 34503.36666666667], [1.65932724E12, 36649.23333333333], [1.6593273E12, 38168.05], [1.65932718E12, 2724.1]], "isOverall": false, "label": "pipy-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65932736E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6980.366666666667, "minX": 1.65932718E12, "maxY": 71153.35, "series": [{"data": [[1.65932736E12, 69808.23333333334], [1.65932724E12, 70311.86666666667], [1.6593273E12, 71153.35], [1.65932718E12, 6980.366666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65932736E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

